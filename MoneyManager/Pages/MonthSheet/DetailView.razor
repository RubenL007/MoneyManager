@page "/Monthsheets/{MonthDate}/{MonthSheetId:guid}"

@using MoneyManager.Data.Interface
@using MoneyManager.Data.Models

@inject IMonthSheet monthSheetService
@inject ICategory categoryService
@inject ISeller sellerService
@inject IAccount accountService

<CardComponent>
<DefaultHeaderComponent Title=@MonthSheet.Date.ToString("Y")
                        EditOnClick=@(x => ViewMode = ViewMode == ViewModeEnum.View ? ViewModeEnum.Edit : ViewModeEnum.View)
                        SaveOnClick=@(x => UpdateMonthSheet())
                        ViewMode=@ViewMode />
<div class="row">
    <div class="col-5">
        <EditForm Model=MonthSheet>
            <div class="row mb-2 mt-2">
                <div class="col">
                    <InputNumberComponent @bind-Value=@MonthSheet.EstimatedEarned
                                          DisplayName="Estimated Earned"
                                          ViewMode=@ViewMode />
                </div>
                <div class="col">
                    <InputNumberComponent @bind-Value=@MonthSheet.EstimatedSpent
                                          DisplayName="Estimated Spent"
                                          ViewMode=@ViewMode />
                </div>
                <div class="col">
                    <!--To show the values on inputs without binding because they are pointers-->
                    <label>Estimated Balance</label>
                    <input value=@MonthSheet.EstimatedBalance
                           type="number"
                           disabled=true>
                </div>
            </div>
            <div class="row mb-2 mt-2">
                <div class="col">
                    <label>Total Earned</label>
                    <input value=@MonthSheet.Earned
                           type="number"
                           disabled=true>
                </div>
                <div class="col">
                    <label>Total Spent</label>
                    <input value=@MonthSheet.TotalSpent
                           type="number"
                           disabled=true>
                </div>
                <div class="col">
                    <label>Balance</label>
                    <input value=@MonthSheet.Balance
                           type="number"
                           disabled=true>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="col-6 offset-md-1">
        <HeaderComponent Title="Earnings" />
        <AutoTableComponent DataSource=@MonthSheet.Earnings
                            TItem=EarningModel
                            ViewMode=@ViewMode
                            DeleteRowMethod=@(earning => MonthSheet.Earnings.Remove(earning))
                            AddNewMethod=@(x=> MonthSheet.Earnings.Add(new()))
                            IsEditableTable=true
                            LimitDateInputsToThisMonth=@MonthSheet.Date
                            OnValueChange=@(x=> StateHasChanged())
                            DataForSelects=@(new List<SelectOptionSet> {
                            new SelectOptionSet
                            {
                            PropertyName = nameof(EarningModel.Account),
                            PropertyType = typeof(AccountModel),
                            Options = Accounts.Cast<object>().ToList()
                            }
                            }) />
    </div>
</div>
</CardComponent>

<HeaderComponent Title="Categories">
    <LeftContent>
        @if (ViewMode == ViewModeEnum.Edit)
        {
            <div class="row d-flex align-items-center">
                <div class="col-auto">
                    <InputSelectComponent @bind-SelectedItem=@NewCategory
                                          TValue=CategoryBaseModel
                                          Items=@Categories
                                          ViewMode=@ViewMode />
                </div>
                <div class="col">
                    <ButtonComponent OnClick=@(x=> AddNewCategory(NewCategory))
                                     ButtonType=@ButtonTypeEnum.Add
                                     ViewMode=@((string.IsNullOrWhiteSpace(NewCategory.Name) || MonthSheet.Categories.Any(x => x.Id == NewCategory.Id)) ? ViewModeEnum.View : ViewModeEnum.Edit)
                                     IsVisible=@(ViewMode == ViewModeEnum.Edit ? true : false) />
                </div>
            </div>
        }
    </LeftContent>
</HeaderComponent>

@if (MonthSheet.Categories.Any())
{
    foreach (CategoryModel cat in MonthSheet.Categories)
    {
        <HeaderComponent Title=@cat.Name
                         TitleFontSize="fs-4" />
        <AutoTableComponent DataSource=@cat.Expenses
                            TItem=ExpenseModel
                            ViewMode=@ViewMode
                            DeleteRowMethod=@(expense => cat.Expenses.Remove(expense))
                            AddNewMethod=@(x => AddNewExpense(cat))
                            IsEditableTable=true
                            LimitDateInputsToThisMonth=@MonthSheet.Date
                            OnValueChange=@(x=> StateHasChanged())
                            DataForSelects=@(new List<SelectOptionSet> {
                    new SelectOptionSet
                    {
                    PropertyName = nameof(ExpenseModel.Seller),
                    PropertyType = typeof(SellerModel),
                    Options = Sellers.Cast<object>().ToList()
                    },
                    new SelectOptionSet
                    {
                    PropertyName = nameof(ExpenseModel.Account),
                    PropertyType = typeof(AccountModel),
                    Options = Accounts.Cast<object>().ToList()
                    },
                    }) />

        <h4>Total Spent: @cat.TotalSpent €</h4>
        <br />
        <br />
    }
}
else
{
    <h4>No Categories added.</h4>
}

@code {
    #region Parameters
    [Parameter] public string? MonthDate { get; set; }
    [Parameter] public Guid MonthSheetId { get; set; }
    #endregion

    #region GetUri(string monthDate, Guid monthId)
    public static string GetUri(DateTime monthDate, Guid monthId)
    {
        string month = monthDate.Date.ToString("MMMM") + monthDate.Date.ToString("yyyy");
        return $"/Monthsheets/{month}/{monthId}";
    }
    #endregion

    #region Properties
    public MonthSheetModel MonthSheet = null!;
    public List<CategoryBaseModel> Categories = null!;
    public List<SellerModel> Sellers = null!;
    public List<AccountModel> Accounts = null!;
    public CategoryBaseModel NewCategory = new();

    public ViewModeEnum ViewMode = ViewModeEnum.View;
    #endregion

    #region Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync(MonthSheetId);
        await SearchCategories();
        await SearchSellers();
        await SearchAccounts();
        await base.OnInitializedAsync();
    }
    #endregion

    #region Task GetDataAsync(Guid id)
    private async Task GetDataAsync(Guid id)
    {
        MonthSheet = monthSheetService.GetMonthSheet(MonthSheetId);
        await Task.CompletedTask;
    }
    #endregion

    #region Task SearchCategories()
    private async Task SearchCategories()
    {
        Categories = categoryService.SearchCategories();
        await Task.CompletedTask;
    }
    #endregion

    #region AddNewCategory(CategoryBaseModel categoryToAdd)
    private void AddNewCategory(CategoryBaseModel categoryToAdd)
    {
        CategoryModel categoryParsed = new()
            {
                Id = categoryToAdd.Id,
                Name = categoryToAdd.Name,
            };
        MonthSheet.Categories.Add(categoryParsed);
        StateHasChanged();
        NewCategory = new();
    }
    #endregion

    #region UpdateMonthSheet()
    private void UpdateMonthSheet()
    {
        monthSheetService.UpdateMonthSheet(MonthSheet);
        ViewMode = ViewModeEnum.View;
    }
    #endregion

    #region AddNewExpense()
    public void AddNewExpense(CategoryModel cat)
    {
        cat.Expenses.Add(new());
        StateHasChanged();
    }
    #endregion

    #region Task SearchSellers()
    private async Task SearchSellers()
    {
        Sellers = sellerService.SearchSellers();
        await Task.CompletedTask;
    }
    #endregion

    #region Task SearchAccounts()
    private async Task SearchAccounts()
    {
        Accounts = accountService.SearchAccounts();
        await Task.CompletedTask;
    }
    #endregion
}
