@page "/Categories"
@using MoneyManager.Data.Interface
@using MoneyManager.Data.Models

@inject ICategory categoryService
@inject NavigationManager navigationManager

<DefaultHeaderComponent Title="Categories"
                        ViewMode=@ViewMode
                        EditOnClick=@(x => ViewMode = ViewMode == ViewModeEnum.View ? ViewModeEnum.Edit : ViewModeEnum.View)
                        SaveOnClick=@(x => UpdateCategories()) />

<AutoTableComponent DataSource=@Categories
                    TItem=CategoryBaseModel
                    ViewMode=@ViewMode
                    IsEditableTable=@(ViewMode == ViewModeEnum.View ? false : true)
                    DeleteRowMethod=@(row => DeleteCategory(row))>
    <FooterTools>
        <EditForm Model=@Category>
            <div class="row d-flex align-items-center">
                <div class="col-2">
                    <InputText @bind-Value=@Category.Name />
                </div>
                <div class="col">
                    <ButtonComponent OnClick=@(x=> AddNewCategory())
                                     ButtonType=@ButtonTypeEnum.Add />
                </div>
            </div>
        </EditForm>
    </FooterTools>
</AutoTableComponent>

@code {
    #region Properties
    CategoryBaseModel Category = new();
    List<CategoryBaseModel> Categories = new();
    ViewModeEnum ViewMode = ViewModeEnum.View;
    #endregion

    #region Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        await SearchCategories();
        await base.OnInitializedAsync();
    }
    #endregion

    #region Task SearchCategories()
    private async Task SearchCategories()
    {
        Categories = categoryService.SearchCategories();
        StateHasChanged();
        await Task.CompletedTask;
    }
    #endregion

    #region Task AddNewCategory()
    private async Task AddNewCategory()
    {
        categoryService.CreateCategory(Category);
        Category = new();
        await SearchCategories();
        await Task.CompletedTask;
    }
    #endregion

    #region Task UpdateCategories()
    private async Task UpdateCategories()
    {
        foreach (var category in Categories)
        {
            categoryService.UpdateCategory(category);
        }
        await SearchCategories();
        ViewMode = ViewModeEnum.View;
        await Task.CompletedTask;
    }
    #endregion

    #region Task DeleteCategory(CategoryBaseModel category)
    private async Task DeleteCategory(CategoryBaseModel category)
    {
        categoryService.DeleteCategory(category.Id);
        await SearchCategories();
        await Task.CompletedTask;
    }
    #endregion
}
