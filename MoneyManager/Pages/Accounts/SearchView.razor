@page "/Accounts"
@using MoneyManager.Data.Interface
@using MoneyManager.Data.Models

@inject IAccount accountService
@inject NavigationManager navigationManager

<DefaultHeaderComponent Title="Accounts"
                        ViewMode=@ViewMode
                        EditOnClick=@(x => ViewMode = ViewMode == ViewModeEnum.View ? ViewModeEnum.Edit : ViewModeEnum.View)
                        SaveOnClick=@(x => UpdateAccounts()) />

<AutoTableComponent DataSource=@Accounts
                    TItem=AccountModel
                    ViewMode=@ViewMode
                    IsEditableTable=@(ViewMode == ViewModeEnum.View ? false : true)
                    DeleteRowMethod=@(row => DeleteAccount(row))>
    <FooterTools>
        <EditForm Model=@Account>
            <div class="row d-flex align-items-center">
                <div class="col-2">
                    <InputText @bind-Value=@Account.Name />
                </div>
                <div class="col">
                    <ButtonComponent OnClick=@(x=> CreateAccount())
                                     ButtonType=@ButtonTypeEnum.Add />
                </div>
            </div>
        </EditForm>
    </FooterTools>
</AutoTableComponent>

@code {
    #region Properties
    AccountModel Account = new();
    List<AccountModel> Accounts = new();
    ViewModeEnum ViewMode = ViewModeEnum.View;
    #endregion

    #region Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        await SearchAccounts();
        await base.OnInitializedAsync();
    }
    #endregion

    #region Task SearchAccounts()
    private async Task SearchAccounts()
    {
        Accounts = accountService.SearchAccounts();
        StateHasChanged();
        await Task.CompletedTask;
    }
    #endregion

    #region Task CreateAccount()
    private async Task CreateAccount()
    {
        if (!string.IsNullOrWhiteSpace(Account.Name))
        {
            accountService.CreateAccount(Account);
            Account = new();
            await SearchAccounts();
        }
        await Task.CompletedTask;
    }
    #endregion

    #region Task UpdateAccounts()
    private async Task UpdateAccounts()
    {
        foreach (var account in Accounts)
        {
            accountService.UpdateAccount(account);
        }
        await SearchAccounts();
        ViewMode = ViewModeEnum.View;
        await Task.CompletedTask;
    }
    #endregion

    #region Task DeleteAccount(AccountModel account)
    private async Task DeleteAccount(AccountModel account)
    {
        accountService.DeleteAccount(account.Id);
        await SearchAccounts();
        await Task.CompletedTask;
    }
    #endregion
}
