@page "/Configuration"
@using MoneyManager.Data.Models

@inject MoneyManager.Data.Interface.IConfiguration configurationService

<EditForm Model=Configuration>
    <CardComponent>
        <DefaultHeaderComponent Title="Define default values to be defined on the creation of Month Sheets"
                                EditOnClick=@(x => ViewMode = ViewMode == ViewModeEnum.View ? ViewModeEnum.Edit : ViewModeEnum.View)
                                SaveOnClick=@(x => UpdateConfiguration())
                                ViewMode=@ViewMode />
        <div class="row">
            <div class="col">
                <InputSelectComponent @bind-SelectedItem=@NewCategory
                                      Items=@Configuration.DefaultCategories
                                      TValue=CategoryModel
                                      DisplayName="Categories" />
            </div>
        </div>
        <div class="row">
            <div class="col-4">
                <InputNumberComponent @bind-Value=@Configuration.DefaultEstimatedEarned
                                      DisplayName="Estimated Earned" />
            </div>
            <div class="col-4">
                <InputNumberComponent @bind-Value=@Configuration.DefaultEstimatedSpent
                                      DisplayName="Estimated Spent" />
            </div>
            <div class="col-4">
                <InputNumberComponent @bind-Value=@Configuration.DefaultEstimatedBalance
                                      DisplayName="Estimated Balance" />
            </div>
        </div>
    </CardComponent>
</EditForm>


@code {
    //mising categories request
    #region Properties
    public ConfigurationModel? Configuration { get; set; } = null!;
    public CategoryModel NewCategory = new();
    ViewModeEnum ViewMode = ViewModeEnum.View;
    #endregion

    #region Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        await SearchConfiguration();
        await base.OnInitializedAsync();
    }
    #endregion

    #region Task SearchConfiguration()
    private async Task SearchConfiguration()
    {
        Configuration = configurationService.SearchConfiguration().FirstOrDefault();
        StateHasChanged();
        await Task.CompletedTask;
    }
    #endregion

    #region Task UpdateConfiguration()
    private async Task UpdateConfiguration()
    {
        if (Configuration != null)
        {
            configurationService.UpdateConfiguration(Configuration);
            await SearchConfiguration();
        }
        await Task.CompletedTask;
    }
    #endregion
}
