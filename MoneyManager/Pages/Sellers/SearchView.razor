@page "/Sellers"
@using MoneyManager.Data.Interface
@using MoneyManager.Data.Models

@inject ISeller sellerService
@inject NavigationManager navigationManager

<AutoTableComponent DataSource=@Sellers
                TItem=SellerModel
                Title="Sellers"
                ViewMode=@ViewMode
                IsEditableTable=@(ViewMode == ViewModeEnum.View ? false : true)
                DeleteRowMethod=@(row => DeleteSeller(row))
                EditMethod=@(x => ViewMode = ViewMode == ViewModeEnum.View ? ViewModeEnum.Edit : ViewModeEnum.View)
                SaveMethod=@(row => UpdateSeller(row)!)>
    <FooterTools>
        <EditForm Model=@Seller>
            <div class="row d-flex align-items-center">
                <div class="col-2">
                    <InputText @bind-Value=@Seller.Name />
                </div>
                <div class="col">
                    <ButtonComponent OnClick=@(x=> CreateSeller())
                                     ButtonType=@ButtonTypeEnum.Add />
                </div>
            </div>
        </EditForm>
    </FooterTools>
</AutoTableComponent>

@code {
    #region Properties
    SellerModel Seller = new();
    List<SellerModel> Sellers = new();
    ViewModeEnum ViewMode = ViewModeEnum.View;
    #endregion

    #region Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        await SearchSellers();
        await base.OnInitializedAsync();
    }
    #endregion

    #region Task SearchSellers()
    private async Task SearchSellers()
    {
        Sellers = sellerService.SearchSellers();
        StateHasChanged();
        await Task.CompletedTask;
    }
    #endregion

    #region Task CreateSeller()
    private async Task CreateSeller()
    {
        sellerService.CreateSeller(Seller);
        Seller = new();
        await SearchSellers();
        await Task.CompletedTask;
    }
    #endregion

    #region Task UpdateSeller(SellerModel seller)
    private async Task UpdateSeller(SellerModel seller)
    {
        sellerService.UpdateSeller(seller);
        await SearchSellers();
        ViewMode = ViewModeEnum.View;
        await Task.CompletedTask;
    }
    #endregion

    #region Task DeleteSeller(SellerModel seller)
    private async Task DeleteSeller(SellerModel seller)
    {
        sellerService.DeleteSeller(seller.Id);
        await SearchSellers();
        await Task.CompletedTask;
    }
    #endregion
}
