@page "/Monthsheets"

@using MoneyManager.Data
@using MoneyManager.Data.Interface
@using MoneyManager.Data.Models

@inject IMonthSheet monthSheetService
@inject NavigationManager navigationManager

<PageTitle>Month Sheets</PageTitle>

<h1>Month Sheets</h1>

<p>This table provides a clear summary of your income and expenses across different months. Use it to track patterns, compare financial performance, and maintain a well-organized view of your finances at a glance. Keep your budgeting simple and effective!</p>

<AutoTableComponent DataSource=@MonthSheets
                    TItem=MonthSheetModel
                    CustomTableHeadNames=@(new List<FieldNameConvertedModel>
                                         {
                                             new() { FieldName = nameof(MonthSheetModel.Date), Label = "Month" }
                                         })
                    ViewMode=@ViewModeEnum.Edit
                    DeleteRowMethod=@(monthsheet => DeleteMonthSheet(monthsheet))
                    OpenDetail=@(monthsheet => OpenDetail(monthsheet))>
    <FooterTools>
        <EditForm Model=@NewMonthSheetDate>
            <div class="row d-flex align-items-center">
                <div class="col">
                    <InputDateComponent @bind-Value=@NewMonthSheetDate
                                        ViewMode=@ViewModeEnum.Edit />
                </div>
                <div class="col">
                    <ButtonComponent OnClick=@(x => {AddNewMonthSheetAsync(new() {Date = NewMonthSheetDate}); StateHasChanged();})
                                     Color=@ColorsEnum.primary
                                     DisplayName="Add This Month"
                                     ViewMode=@(MonthSheets.Any(x=>x.Date.Date.Month == NewMonthSheetDate.Month && x.Date.Date.Year == NewMonthSheetDate.Year) ? ViewModeEnum.View : ViewModeEnum.Edit) />
                </div>
            </div>
        </EditForm>
    </FooterTools>
</AutoTableComponent>

@code {
    #region Properties
    List<MonthSheetModel> MonthSheets = new List<MonthSheetModel>();
    DateTime NewMonthSheetDate = DateTime.Now;
    #endregion

    #region Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync();
        await Task.CompletedTask;
    }
    #endregion

    #region Task GetDataAsync()
    private async Task GetDataAsync()
    {
        MonthSheets = monthSheetService.SearchMonthSheets();
        await Task.CompletedTask;
    }
    #endregion

    #region Task AddNewMonthSheetAsync()
    private async Task AddNewMonthSheetAsync(MonthSheetModel monthSheet)
    {
        monthSheetService.CreateMonthSheet(monthSheet);
        await GetDataAsync();
        await Task.CompletedTask;
    }
    #endregion

    #region Task DeleteMonthSheet()
    private async Task DeleteMonthSheet(MonthSheetModel item)
    {
        monthSheetService.DeleteMonthSheet(item.Id);
        await GetDataAsync();
        await Task.CompletedTask;
    }
    #endregion

    #region OpenDetail(MonthSheetModel month)
    private void OpenDetail(MonthSheetModel month)
    {
        navigationManager.NavigateTo(DetailView.GetUri(month.Date, month.Id));
    }
    #endregion
}
